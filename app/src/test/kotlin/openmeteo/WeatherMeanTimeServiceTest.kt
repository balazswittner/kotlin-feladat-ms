package openmeteo

import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.paramnames.ParameterNamesModule
import hu.vanio.kotlin.feladat.ms.openmeteo.WeatherForecast
import org.junit.jupiter.api.Test
import java.time.LocalDate
import java.time.format.DateTimeFormatter

class WeatherMeanTimeServiceTest() {
    private val objectMapper = ObjectMapper().also {
        it.registerModules(JavaTimeModule(), ParameterNamesModule())
        it.configure(DeserializationFeature.UNWRAP_ROOT_VALUE, false)
    }

    val response = """
        {
  "latitude": 47.5,
  "longitude": 19.0625,
  "generationtime_ms": 0.030040740966796875,
  "utc_offset_seconds": 3600,
  "timezone": "Europe/Budapest",
  "timezone_abbreviation": "CET",
  "elevation": 124,
  "hourly_units": {
    "time": "iso8601",
    "temperature_2m": "Â°C"
  },
  "hourly": {
    "time": [
      "2024-03-18T00:00",
      "2024-03-18T01:00",
      "2024-03-18T02:00",
      "2024-03-18T03:00",
      "2024-03-18T04:00",
      "2024-03-18T05:00",
      "2024-03-18T06:00",
      "2024-03-18T07:00",
      "2024-03-18T08:00",
      "2024-03-18T09:00",
      "2024-03-18T10:00",
      "2024-03-18T11:00",
      "2024-03-18T12:00",
      "2024-03-18T13:00",
      "2024-03-18T14:00",
      "2024-03-18T15:00",
      "2024-03-18T16:00",
      "2024-03-18T17:00",
      "2024-03-18T18:00",
      "2024-03-18T19:00",
      "2024-03-18T20:00",
      "2024-03-18T21:00",
      "2024-03-18T22:00",
      "2024-03-18T23:00",
      "2024-03-19T00:00",
      "2024-03-19T01:00",
      "2024-03-19T02:00",
      "2024-03-19T03:00",
      "2024-03-19T04:00",
      "2024-03-19T05:00",
      "2024-03-19T06:00",
      "2024-03-19T07:00",
      "2024-03-19T08:00",
      "2024-03-19T09:00",
      "2024-03-19T10:00",
      "2024-03-19T11:00",
      "2024-03-19T12:00",
      "2024-03-19T13:00",
      "2024-03-19T14:00",
      "2024-03-19T15:00",
      "2024-03-19T16:00",
      "2024-03-19T17:00",
      "2024-03-19T18:00",
      "2024-03-19T19:00",
      "2024-03-19T20:00",
      "2024-03-19T21:00",
      "2024-03-19T22:00",
      "2024-03-19T23:00",
      "2024-03-20T00:00",
      "2024-03-20T01:00",
      "2024-03-20T02:00",
      "2024-03-20T03:00",
      "2024-03-20T04:00",
      "2024-03-20T05:00",
      "2024-03-20T06:00",
      "2024-03-20T07:00",
      "2024-03-20T08:00",
      "2024-03-20T09:00",
      "2024-03-20T10:00",
      "2024-03-20T11:00",
      "2024-03-20T12:00",
      "2024-03-20T13:00",
      "2024-03-20T14:00",
      "2024-03-20T15:00",
      "2024-03-20T16:00",
      "2024-03-20T17:00",
      "2024-03-20T18:00",
      "2024-03-20T19:00",
      "2024-03-20T20:00",
      "2024-03-20T21:00",
      "2024-03-20T22:00",
      "2024-03-20T23:00",
      "2024-03-21T00:00",
      "2024-03-21T01:00",
      "2024-03-21T02:00",
      "2024-03-21T03:00",
      "2024-03-21T04:00",
      "2024-03-21T05:00",
      "2024-03-21T06:00",
      "2024-03-21T07:00",
      "2024-03-21T08:00",
      "2024-03-21T09:00",
      "2024-03-21T10:00",
      "2024-03-21T11:00",
      "2024-03-21T12:00",
      "2024-03-21T13:00",
      "2024-03-21T14:00",
      "2024-03-21T15:00",
      "2024-03-21T16:00",
      "2024-03-21T17:00",
      "2024-03-21T18:00",
      "2024-03-21T19:00",
      "2024-03-21T20:00",
      "2024-03-21T21:00",
      "2024-03-21T22:00",
      "2024-03-21T23:00",
      "2024-03-22T00:00",
      "2024-03-22T01:00",
      "2024-03-22T02:00",
      "2024-03-22T03:00",
      "2024-03-22T04:00",
      "2024-03-22T05:00",
      "2024-03-22T06:00",
      "2024-03-22T07:00",
      "2024-03-22T08:00",
      "2024-03-22T09:00",
      "2024-03-22T10:00",
      "2024-03-22T11:00",
      "2024-03-22T12:00",
      "2024-03-22T13:00",
      "2024-03-22T14:00",
      "2024-03-22T15:00",
      "2024-03-22T16:00",
      "2024-03-22T17:00",
      "2024-03-22T18:00",
      "2024-03-22T19:00",
      "2024-03-22T20:00",
      "2024-03-22T21:00",
      "2024-03-22T22:00",
      "2024-03-22T23:00",
      "2024-03-23T00:00",
      "2024-03-23T01:00",
      "2024-03-23T02:00",
      "2024-03-23T03:00",
      "2024-03-23T04:00",
      "2024-03-23T05:00",
      "2024-03-23T06:00",
      "2024-03-23T07:00",
      "2024-03-23T08:00",
      "2024-03-23T09:00",
      "2024-03-23T10:00",
      "2024-03-23T11:00",
      "2024-03-23T12:00",
      "2024-03-23T13:00",
      "2024-03-23T14:00",
      "2024-03-23T15:00",
      "2024-03-23T16:00",
      "2024-03-23T17:00",
      "2024-03-23T18:00",
      "2024-03-23T19:00",
      "2024-03-23T20:00",
      "2024-03-23T21:00",
      "2024-03-23T22:00",
      "2024-03-23T23:00",
      "2024-03-24T00:00",
      "2024-03-24T01:00",
      "2024-03-24T02:00",
      "2024-03-24T03:00",
      "2024-03-24T04:00",
      "2024-03-24T05:00",
      "2024-03-24T06:00",
      "2024-03-24T07:00",
      "2024-03-24T08:00",
      "2024-03-24T09:00",
      "2024-03-24T10:00",
      "2024-03-24T11:00",
      "2024-03-24T12:00",
      "2024-03-24T13:00",
      "2024-03-24T14:00",
      "2024-03-24T15:00",
      "2024-03-24T16:00",
      "2024-03-24T17:00",
      "2024-03-24T18:00",
      "2024-03-24T19:00",
      "2024-03-24T20:00",
      "2024-03-24T21:00",
      "2024-03-24T22:00",
      "2024-03-24T23:00"
    ],
    "temperature_2m": [
      6,
      5.7,
      5.4,
      5.2,
      4.8,
      4.6,
      4.5,
      4.7,
      5.9,
      7.3,
      8.9,
      9.7,
      10.4,
      10.9,
      11.1,
      11,
      10.6,
      9.8,
      8.7,
      7.4,
      6.2,
      5.4,
      4.7,
      4.2,
      3.7,
      3.3,
      3,
      2.9,
      2.8,
      2.8,
      2.8,
      3.2,
      3.9,
      4.7,
      5.5,
      6.4,
      7.4,
      8,
      8.5,
      8.8,
      8.8,
      8.6,
      7.8,
      6.7,
      5.6,
      4.7,
      4,
      3.4,
      2.8,
      2.3,
      1.9,
      1.6,
      1.3,
      1,
      0.8,
      1.1,
      3.5,
      6.8,
      9.1,
      10.5,
      11.5,
      12.2,
      12.8,
      13.1,
      12.9,
      12.3,
      10.9,
      9.1,
      7.8,
      6.9,
      6,
      5.4,
      4.6,
      4.3,
      4.1,
      4.1,
      4.2,
      4.3,
      4.1,
      4.1,
      6.1,
      8.3,
      10.1,
      11.5,
      12.6,
      13.3,
      13.9,
      14.2,
      14.1,
      13.4,
      12.4,
      11.4,
      10.7,
      10.1,
      9.5,
      9.1,
      8.8,
      8.5,
      8.2,
      8,
      7.8,
      7.4,
      7,
      7.2,
      8.2,
      9.6,
      11.2,
      12.7,
      14.3,
      15.5,
      16.2,
      16.4,
      16.1,
      15.3,
      14,
      12.7,
      11.7,
      10.7,
      9.9,
      9.4,
      9.1,
      8.9,
      8.7,
      8.5,
      8.3,
      8.1,
      7.9,
      7.7,
      10.8,
      12.7,
      14.5,
      16.4,
      18.3,
      19.7,
      20.4,
      20.6,
      20.3,
      19.5,
      18.2,
      16.7,
      14.8,
      12.7,
      10.9,
      9.9,
      9.3,
      8.7,
      8.2,
      7.8,
      7.5,
      7.2,
      7,
      6.9,
      7.1,
      7.5,
      7.8,
      7.8,
      7.6,
      7.5,
      7.4,
      7.4,
      7.4,
      7.2,
      6.9,
      6.8,
      6.8,
      7,
      7.1,
      7.1
    ]
  }
}
    """.trimIndent()

    @Test
    fun test() {
        val weatherForecast = objectMapper.readValue(response, WeatherForecast::class.java)
        val dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm")
        val weatherMap = mutableMapOf<LocalDate, MutableList<Double>>()

        var i = 0
        weatherForecast.hourly.time.forEach {
            val temperature = weatherForecast.hourly.temperature2m[i++]
            val key = LocalDate.parse(it, dateTimeFormatter)
            weatherMap.compute(key) { _, value ->
                value?.plus(temperature)?.toMutableList() ?: mutableListOf(temperature)
            }
        }
        weatherMap.forEach {
            println("${it.key} - ${it.value.average()}")
        }
    }
}